{-# LANGUAGE UndecidableInstances #-}

module Numeric ( Numeric
               , type (*.*)
               , type (-.>)
               ) where

import Data.Constraint
import Data.Default

import qualified Test.QuickCheck as QC
import qualified Test.QuickCheck.Instances ()

import Category



-- | The category of numeric types
class (Num a, Default a) => Numeric a
instance (Num a, Default a) => Numeric a
instance Category Numeric



-- | The cateogry's product type

type (*.*) = CProduct Numeric

instance (Default a, Default b) => Default (a *.* b) where
    def = CProduct (def, def)

instance (Num a, Num b) => Num (a *.* b) where
    CProduct (x1, x2) + CProduct (y1, y2) = CProduct (x1 + y1, x2 + y2)
    CProduct (x1, x2) * CProduct (y1, y2) = CProduct (x1 * y1, x2 * y2)
    negate (CProduct (x1, x2)) = CProduct (negate x1, negate x2)
    abs (CProduct (x1, x2)) = CProduct (abs x1, abs x2)
    signum (CProduct (x1, x2)) = CProduct (signum x1, signum x2)
    fromInteger i = CProduct (fromInteger i, fromInteger i)



-- | A mock function type
data (-.>) a b where
    NFun :: (Numeric a, Numeric b) => (a -> b) -> (a -.> b)
    NQCFun :: (Numeric a, Numeric b) => QC.Fun a b -> (a -.> b)
instance Show (QC.Fun a b) => Show ((-.>) a b) where
    show (NFun f) = show ("NFun" :: String)
    show (NQCFun f) = show f

instance Morphism (-.>) where
    type MorCat (-.>) = Numeric
    proveChase (NFun f) = Sub Dict
    proveChase (NQCFun f) = Sub Dict
    chase (NFun f) = f
    chase (NQCFun f) = QC.applyFun f
instance Discretization (-.>) where
    discretize = NFun

instance (Numeric a, Numeric b, QC.Arbitrary (QC.Fun a b))
        => QC.Arbitrary ((-.>) a b) where
    arbitrary = NQCFun <$> QC.arbitrary
    shrink (NQCFun f) = NQCFun <$> QC.shrink f
    shrink f = undefined
